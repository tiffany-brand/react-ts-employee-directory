{"version":3,"sources":["components/Header/index.tsx","interfaces/Order.ts","components/Search/index.tsx","utils/API.ts","utils/utils.ts","components/EmployeeTable/index.tsx","components/Directory/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Order","Grid","className","container","justify","Typography","variant","align","Search","handleInputChange","TextField","id","label","type","name","onChange","API","axios","get","util","value","empArr","filter","emp","firstName","toLowerCase","includes","lastName","email","phone","city","state","key","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","EmployeeTable","employees","orderBy","handleSort","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","colName","colLabel","map","col","TableSortLabel","active","direction","onClick","TableBody","hover","alt","src","picture","gender","href","Directory","loadedEmployees","search","ASC","column","sorted","sort","newOrder","DESC","setState","event","currentTarget","filteredEmps","then","response","empData","data","results","medium","first","last","location","catch","err","console","log","this","Component","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fa490fc.chunk.js","sourcesContent":["import React from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from \"@material-ui/core/Typography\"\nimport \"./style.css\";\n\nfunction Header() {\n\n\n\n    return (\n        <>\n            <Grid className=\"Header-heading\" container justify=\"center\">\n                <Typography variant=\"h2\" align=\"center\">Employee Directory</Typography>\n                <Grid className=\"Header-instructions\" container justify=\"center\">\n                    <Typography align=\"center\">Click the headings to sort or search to filter results. </Typography>\n                </Grid>\n            </Grid>\n\n        </>\n    )\n\n}\n\nexport default Header;","export enum Order {\n    ASC = \"asc\",\n    DESC = \"desc\"\n}","import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\ntype Props = {\n    handleInputChange: any;\n}\n\nconst Search: React.FC<Props> = ({\n    handleInputChange,\n}) => {\n\n    return (\n        <TextField id=\"standard-search\" label=\"search\" type=\"search\" name=\"search\" variant=\"outlined\" onChange={handleInputChange} />\n    )\n\n}\n\nexport default Search;","import axios from \"axios\";\n\nconst API = {\n    getEmployees: () => {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n    }\n}\n\nexport { API }","import Employee from \"../interfaces/Employee\";\n\nconst util = {\n\n    // search employee array for matches in first, last, email, phone, city, state\n    searchEmp: (value: string, empArr: Employee[]) => {\n        let filteredEmps = empArr.filter((emp) => {\n            return emp.firstName.toLowerCase().includes(value.toLowerCase()) ||\n                emp.lastName.toLowerCase().includes(value.toLowerCase()) ||\n                emp.email.toLowerCase().includes(value.toLowerCase()) ||\n                emp.phone.toLowerCase().includes(value.toLowerCase()) ||\n                emp.city.toLowerCase().includes(value.toLowerCase()) ||\n                emp.state.toLowerCase().includes(value.toLowerCase())\n        })\n        return filteredEmps;\n    },\n\n    // object sorting function from https://www.sitepoint.com/sort-an-array-of-objects-in-javascript/\n    compareValues: (key: keyof Employee, order = 'asc') => {\n        return function innerSort(a: Employee, b: Employee) {\n            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n                // property doesn't exist on either object\n                return 0;\n            }\n\n            const varA = (typeof a[key] === 'string')\n                ? a[key].toUpperCase() : a[key];\n            const varB = (typeof b[key] === 'string')\n                ? b[key].toUpperCase() : b[key];\n\n            let comparison = 0;\n            if (varA > varB) {\n                comparison = 1;\n            } else if (varA < varB) {\n                comparison = -1;\n            }\n            return (\n                (order === 'desc') ? (comparison * -1) : comparison\n            );\n        };\n    }\n}\n\nexport { util }","import React from \"react\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Employee from \"../../interfaces/Employee\";\nimport { Order } from \"../../interfaces/Order\";\n\ntype Props = {\n    employees: Employee[];\n    orderBy: string;\n    order: Order;\n    handleSort: any;\n\n}\n\nconst EmployeeTable: React.FC<Props> = ({\n    employees,\n    orderBy,\n    order,\n    handleSort\n}) => {\n\n    interface ColHeadings {\n        colName: string;\n        colLabel: string\n    }\n\n    const colHeadings: ColHeadings[] = [\n        { colName: 'First Name', colLabel: \"firstName\" },\n        { colName: 'Last Name', colLabel: \"lastName\" },\n        { colName: 'Gender', colLabel: \"gender\" },\n        { colName: 'Email', colLabel: \"email\" },\n        { colName: 'Phone Number', colLabel: \"phone\" },\n        { colName: 'City', colLabel: \"city\" },\n        { colName: 'State', colLabel: \"state\" },\n    ]\n\n    return (\n        <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"Employee Table\">\n                {/* Table headings with sort icons and click handlers */}\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Picture</TableCell>\n                        {colHeadings.map((col: ColHeadings) => {\n                            return (\n                                <TableCell>{col.colName}\n                                    <TableSortLabel active={orderBy === col.colLabel} direction={order} onClick={() => handleSort(col.colLabel, order)}></TableSortLabel>\n                                </TableCell>\n                            )\n                        })}\n                    </TableRow>\n                </TableHead>\n                {/* Create table rows from employees array */}\n                <TableBody>\n                    {\n                        employees.map(emp => {\n                            return <TableRow hover key={emp.id}>\n                                <TableCell align=\"left\"><img alt={`${emp.firstName} ${emp.lastName}`} src={emp.picture}></img></TableCell>\n                                <TableCell align=\"left\">{emp.firstName}</TableCell>\n                                <TableCell align=\"left\">{emp.lastName}</TableCell>\n                                <TableCell align=\"left\">{emp.gender}</TableCell>\n                                <TableCell align=\"left\"><a href={`mailto:${emp.email}`}>{emp.email}</a></TableCell>\n                                <TableCell align=\"left\">{emp.phone}</TableCell>\n                                <TableCell align=\"left\">{emp.city}</TableCell>\n                                <TableCell align=\"left\">{emp.state}</TableCell>\n                            </TableRow>\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default EmployeeTable;","import React, { Component } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport Header from \"../Header\";\nimport Search from \"../Search\";\nimport { API } from \"../../utils/API\";\nimport { util } from \"../../utils/utils\";\nimport Employee from \"../../interfaces/Employee\";\nimport EmployeeTable from \"../EmployeeTable\";\nimport { Order } from '../../interfaces/Order';\nimport \"./style.css\";\n\n\n\n\nclass Directory extends Component<{}, {\n    employees: Employee[];\n    loadedEmployees: Employee[];\n    search: string;\n    orderBy: string;\n    order: Order;\n}> {\n\n    state = {\n        employees: [],\n        loadedEmployees: [],\n        search: \"\",\n        orderBy: \"\",\n        order: Order.ASC\n    }\n\n    // Get employees from API and store required fields in employees state\n    componentDidMount() {\n        API.getEmployees()\n            .then(response => {\n                let empData: Employee[] = response.data.results.map((emp: any) => {\n                    return ({\n                        id: emp.id.value,\n                        picture: emp.picture.medium,\n                        firstName: emp.name.first,\n                        lastName: emp.name.last,\n                        gender: emp.gender,\n                        email: emp.email,\n                        phone: emp.phone,\n                        city: emp.location.city,\n                        state: emp.location.state\n                    });\n                })\n                this.setState({\n                    employees: empData,\n                    loadedEmployees: empData\n                })\n\n            })\n            .catch(err => console.log(err));\n    };\n\n    // function to sort table by a given column\n    handleSort = (column: keyof Employee, order: Order) => {\n        let sorted = [...this.state.employees].sort(util.compareValues(column, order));\n        let newOrder = order === Order.ASC ? Order.DESC : Order.ASC\n        this.setState({\n            employees: sorted,\n            orderBy: column,\n            order: newOrder\n        });\n    }\n\n    // handle search input - filter table when user inputs characters into search\n    handleInputChange = (event: React.FormEvent<HTMLInputElement>) => {\n        // Getting the value of the search input which triggered the change\n        const { value } = event.currentTarget;\n\n        // Updating the search input's state\n        this.setState({\n            search: value\n        }, () => {\n            // filter the employee list\n            if (this.state.search) {\n                let filteredEmps = util.searchEmp(this.state.search, this.state.loadedEmployees);\n                this.setState({\n                    employees: filteredEmps,\n                    orderBy: \"\"\n                })\n            } else {\n                this.setState({\n                    employees: this.state.loadedEmployees,\n                    orderBy: \"\"\n                })\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"Directory-container\">\n                <Header />\n                <Grid className=\"Directory-search\" container justify=\"center\">\n                    <Search handleInputChange={this.handleInputChange} />\n                </Grid>\n                <Grid className=\"Directory-table\">\n                    <EmployeeTable employees={this.state.employees} handleSort={this.handleSort} orderBy={this.state.orderBy} order={this.state.order} />\n                </Grid>\n            </div>\n        )\n    }\n\n}\n\nexport default Directory;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Directory from './components/Directory';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Directory />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}